library(dplyr)
library(shiny)
library(ggplot2)
library(readxl)
library(ChainLadder)
#Import the data
R_Shiny_Assignment <- read_excel("R Shiny Assignment.xlsx",
sheet = "Assignment", range = "B3:D9")
library(dplyr)
library(shiny)
library(ggplot2)
library(readxl)
library(ChainLadder)
ui = fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
sidebarLayout(
sidebarPanel(
#Create slider for Tail Factor
sliderInput(inputId = "tail_fac",
label = "Tail Factor",
min = 1, max =2, value = 1.1 ,step = 0.1, width="100%")
),
mainPanel(
h1(paste0("Cummulative Claims Paid")),
#Want line graph in main panel
plotOutput(outputId = "line", width = "90%"),
tableOutput(outputId = "Table1")
)
)
)
server = function( input, output, session){
#function for the Chain Ladder
CL = function(fileloc ,tail_fac){
R_Shiny_Assignment <- read_excel(fileloc,
sheet = "Assignment", range = "B3:D9")
#Put the data into a matix
tri = as.triangle (R_Shiny_Assignment,
origin = 'Loss Year',
dev = 'Development Year',
value = 'Amount of Claims Paid ($)')
#Cummulative chain ladder
tri_cum = incr2cum(tri, FALSE)
n= 3
#Create an empty vector for development year 4
dev_4 = vector("double", n)
#Bind into our matrix
tri2 = cbind(tri_cum, dev_4)
colnames(tri2) = c(1, 2, 3, 4)
#To calculate the development factor
dev_fac <- sapply(1:(n-1),
function(i){
sum(tri2[c(1:(n-i)),i+1])/sum(tri2[c(1:(n-i)),i])
}
)
#define Tail Factor
dev_fac[n] = tail_fac
#Create full Chain Ladder
for(k in 1:n){
tri2[(n-k+1):n, k+1] <- tri2[(n-k+1):n,k]*dev_fac[k]
}
tri2 = round(tri2)
return(tri2)
}
#put the Chain Ladder function into the reactive function
z1 = reactive( CL("C:/Users/User/Desktop/Training/Rshiny Training/R Shiny Assignment.xlsx", input$tail_fac) )
output$Table1 = renderTable(z1(), rownames = TRUE, bordered =TRUE, striped = TRUE,
spacing = "l",
digits = 0,
width = "90%",)
output$line = renderPlot({
matplot(t(z1()), type ='l', lty=1, lwd = 2, xlab = "Development Year", ylab = "Cummulative Claims Paid")
matpoints (t(z1()), type = 'p', pch=16)
text(t(z1()))
legend( "topleft",legend = c("2017","2018", "2019"), col= c("black", "red", "green"), lty =1)
},res = 96,height =400, width =1125)
}
shinyApp(ui, server)
R_Shiny_Training = function (){shinyApp(ui, server)}
library(dplyr)
library(shiny)
library(ggplot2)
library(readxl)
library(ChainLadder)
ui = fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
sidebarLayout(
sidebarPanel(
#Create slider for Tail Factor
sliderInput(inputId = "tail_fac",
label = "Tail Factor",
min = 1, max =2, value = 1.1 ,step = 0.1, width="100%")
),
mainPanel(
h1(paste0("Cummulative Claims Paid")),
#Want line graph in main panel
plotOutput(outputId = "line", width = "90%"),
tableOutput(outputId = "Table1")
)
)
)
server = function( input, output, session){
#function for the Chain Ladder
CL = function(fileloc ,tail_fac){
R_Shiny_Assignment <- read_excel(fileloc,
sheet = "Assignment", range = "B3:D9")
#Put the data into a matix
tri = as.triangle (R_Shiny_Assignment,
origin = 'Loss Year',
dev = 'Development Year',
value = 'Amount of Claims Paid ($)')
#Cummulative chain ladder
tri_cum = incr2cum(tri, FALSE)
n= 3
#Create an empty vector for development year 4
dev_4 = vector("double", n)
#Bind into our matrix
tri2 = cbind(tri_cum, dev_4)
colnames(tri2) = c(1, 2, 3, 4)
#To calculate the development factor
dev_fac <- sapply(1:(n-1),
function(i){
sum(tri2[c(1:(n-i)),i+1])/sum(tri2[c(1:(n-i)),i])
}
)
#define Tail Factor
dev_fac[n] = tail_fac
#Create full Chain Ladder
for(k in 1:n){
tri2[(n-k+1):n, k+1] <- tri2[(n-k+1):n,k]*dev_fac[k]
}
tri2 = round(tri2)
return(tri2)
}
#put the Chain Ladder function into the reactive function
z1 = reactive( CL("C:/Users/User/Desktop/Training/Rshiny Training/R Shiny Assignment.xlsx", input$tail_fac) )
output$Table1 = renderTable(z1(), rownames = TRUE, bordered =TRUE, striped = TRUE,
spacing = "l",
digits = 0,
width = "90%",)
output$line = renderPlot({
matplot(t(z1()), type ='l', lty=1, lwd = 2, xlab = "Development Year", ylab = "Cummulative Claims Paid")
matpoints (t(z1()), type = 'p', pch=16)
text(t(z1()))
legend( "topleft",legend = c("2017","2018", "2019"), col= c("black", "red", "green"), lty =1)
},res = 96,height =400, width =1125)
}
R_Shiny_Training = function (){shinyApp(ui, server)}
R_Shiny_Training = function (){
shinyApp(ui, server)}
